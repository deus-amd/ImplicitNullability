@using ImplicitNullability.Samples.CodeWithIN
@using JetBrains.Annotations
@functions{

    [CanBeNull]
    private readonly string _nullString = null;

    private readonly int? _nullableInt = null;

    private readonly string _field = null /*Expect:AssignNullToNotNullAttribute[Flds]*/;

    private string SomeMethod(string a)
    {
        ReSharper.TestValueAnalysis(a, a == null /*Expect:ConditionIsAlwaysTrueOrFalse[MIn]*/);
        return "";
    }

    [CanBeNull]
    private string SomeNullableMethod([CanBeNull] string a, int? b, string optional = null)
    {
        ReSharper.SuppressUnusedWarning(a, b, optional);
        return null;
    }

    private string SomeFunction(out string outParam)
    {
        outParam = null /*Expect:AssignNullToNotNullAttribute[MOut]*/;
        return null /*Expect:AssignNullToNotNullAttribute[MOut]*/;
    }

    public void Consume()
    {
        ReSharper.TestValueAnalysis(_field, _field == null /*Expect:ConditionIsAlwaysTrueOrFalse[Flds]*/);
    }
}

@* Write method *@
@null
@_nullString
@_nullableInt

@SomeMethod(null /*Expect:AssignNullToNotNullAttribute[MIn]*/)
@SomeNullableMethod(null, null, optional: null)
@{
    string outParam;
}
@SomeFunction(out outParam)